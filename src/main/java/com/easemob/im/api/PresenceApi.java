/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiCallback;
import com.easemob.im.ApiClient;
import com.easemob.im.ApiException;
import com.easemob.im.ApiResponse;
import com.easemob.im.Configuration;
import com.easemob.im.Pair;
import com.easemob.im.ProgressRequestBody;
import com.easemob.im.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.easemob.im.api.model.EMGetGroupOnlineMemberCountResult;
import com.easemob.im.api.model.EMGetMultipleUsersPresenceStatus;
import com.easemob.im.api.model.EMGetMultipleUsersPresenceStatusResult;
import com.easemob.im.api.model.EMGetUserSubscriptionListResult;
import com.easemob.im.api.model.EMSetUserPresenceStatus;
import com.easemob.im.api.model.EMSetUserPresenceStatusResult;
import com.easemob.im.api.model.EMSubscribeMultipleUsersPresenceStatus;
import com.easemob.im.api.model.EMSubscribeMultipleUsersPresenceStatusResult;
import com.easemob.im.api.model.EMUnsubscribeMultipleUsersPresenceStatusResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PresenceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PresenceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PresenceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getGroupOnlineMemberCount
     * @param groupId 群组 ID (required)
     * @param queryType 查询类型，查询群组的在线成员数量，传 1 即可 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getGroupOnlineMemberCountCall(String groupId, Integer queryType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/presence/online/{group_id}/type/{query_type}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "query_type" + "}", localVarApiClient.escapeString(queryType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupOnlineMemberCountValidateBeforeCall(String groupId, Integer queryType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupOnlineMemberCount(Async)");
        }

        // verify the required parameter 'queryType' is set
        if (queryType == null) {
            throw new ApiException("Missing the required parameter 'queryType' when calling getGroupOnlineMemberCount(Async)");
        }

        return getGroupOnlineMemberCountCall(groupId, queryType, _callback);

    }

    /**
     * 查询单个群组的在线成员数量
     * 你可以查询单个群组的在线成员数量。如需使用该 API，需要联系环信商务开通。这里的在线状态指用户的 app 与服务器成功建立连接，不包括用户的自定义在线状态，如忙碌、马上回来等。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E7%BE%A4%E7%BB%84%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F
     * @param groupId 群组 ID (required)
     * @param queryType 查询类型，查询群组的在线成员数量，传 1 即可 (required)
     * @return EMGetGroupOnlineMemberCountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetGroupOnlineMemberCountResult getGroupOnlineMemberCount(String groupId, Integer queryType) throws ApiException {
        ApiResponse<EMGetGroupOnlineMemberCountResult> localVarResp = getGroupOnlineMemberCountWithHttpInfo(groupId, queryType);
        return localVarResp.getData();
    }

    /**
     * 查询单个群组的在线成员数量
     * 你可以查询单个群组的在线成员数量。如需使用该 API，需要联系环信商务开通。这里的在线状态指用户的 app 与服务器成功建立连接，不包括用户的自定义在线状态，如忙碌、马上回来等。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E7%BE%A4%E7%BB%84%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F
     * @param groupId 群组 ID (required)
     * @param queryType 查询类型，查询群组的在线成员数量，传 1 即可 (required)
     * @return ApiResponse&lt;EMGetGroupOnlineMemberCountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetGroupOnlineMemberCountResult> getGroupOnlineMemberCountWithHttpInfo(String groupId, Integer queryType) throws ApiException {
        okhttp3.Call localVarCall = getGroupOnlineMemberCountValidateBeforeCall(groupId, queryType, null);
        Type localVarReturnType = new TypeToken<EMGetGroupOnlineMemberCountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询单个群组的在线成员数量 (asynchronously)
     * 你可以查询单个群组的在线成员数量。如需使用该 API，需要联系环信商务开通。这里的在线状态指用户的 app 与服务器成功建立连接，不包括用户的自定义在线状态，如忙碌、马上回来等。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E7%BE%A4%E7%BB%84%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F
     * @param groupId 群组 ID (required)
     * @param queryType 查询类型，查询群组的在线成员数量，传 1 即可 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getGroupOnlineMemberCountAsync(String groupId, Integer queryType, final ApiCallback<EMGetGroupOnlineMemberCountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupOnlineMemberCountValidateBeforeCall(groupId, queryType, _callback);
        Type localVarReturnType = new TypeToken<EMGetGroupOnlineMemberCountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMultipleUserPresenceStatus
     * @param username  (required)
     * @param emGetMultipleUsersPresenceStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getMultipleUserPresenceStatusCall(String username, EMGetMultipleUsersPresenceStatus emGetMultipleUsersPresenceStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetMultipleUsersPresenceStatus;

        // create path and map variables
        String localVarPath = "/users/{username}/presence"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleUserPresenceStatusValidateBeforeCall(String username, EMGetMultipleUsersPresenceStatus emGetMultipleUsersPresenceStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getMultipleUserPresenceStatus(Async)");
        }

        return getMultipleUserPresenceStatusCall(username, emGetMultipleUsersPresenceStatus, _callback);

    }

    /**
     * 批量获取在线状态信息
     * 你一次可获取多个用户的在线状态信息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF
     * @param username  (required)
     * @param emGetMultipleUsersPresenceStatus  (optional)
     * @return EMGetMultipleUsersPresenceStatusResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetMultipleUsersPresenceStatusResult getMultipleUserPresenceStatus(String username, EMGetMultipleUsersPresenceStatus emGetMultipleUsersPresenceStatus) throws ApiException {
        ApiResponse<EMGetMultipleUsersPresenceStatusResult> localVarResp = getMultipleUserPresenceStatusWithHttpInfo(username, emGetMultipleUsersPresenceStatus);
        return localVarResp.getData();
    }

    /**
     * 批量获取在线状态信息
     * 你一次可获取多个用户的在线状态信息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF
     * @param username  (required)
     * @param emGetMultipleUsersPresenceStatus  (optional)
     * @return ApiResponse&lt;EMGetMultipleUsersPresenceStatusResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetMultipleUsersPresenceStatusResult> getMultipleUserPresenceStatusWithHttpInfo(String username, EMGetMultipleUsersPresenceStatus emGetMultipleUsersPresenceStatus) throws ApiException {
        okhttp3.Call localVarCall = getMultipleUserPresenceStatusValidateBeforeCall(username, emGetMultipleUsersPresenceStatus, null);
        Type localVarReturnType = new TypeToken<EMGetMultipleUsersPresenceStatusResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量获取在线状态信息 (asynchronously)
     * 你一次可获取多个用户的在线状态信息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF
     * @param username  (required)
     * @param emGetMultipleUsersPresenceStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getMultipleUserPresenceStatusAsync(String username, EMGetMultipleUsersPresenceStatus emGetMultipleUsersPresenceStatus, final ApiCallback<EMGetMultipleUsersPresenceStatusResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleUserPresenceStatusValidateBeforeCall(username, emGetMultipleUsersPresenceStatus, _callback);
        Type localVarReturnType = new TypeToken<EMGetMultipleUsersPresenceStatusResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserSubscriptionList
     * @param username  (required)
     * @param pageNum 要查询的页码。该参数的值须大于等于 1。若不传，默认值为 1 (optional)
     * @param pageSize 每页显示的订阅用户数量。取值范围为 [1,500]，若不传默认值为 1 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getUserSubscriptionListCall(String username, Integer pageNum, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/presence/sublist"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNum", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSubscriptionListValidateBeforeCall(String username, Integer pageNum, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserSubscriptionList(Async)");
        }

        return getUserSubscriptionListCall(username, pageNum, pageSize, _callback);

    }

    /**
     * 查询订阅列表
     * 查询当前用户已订阅在线状态的用户列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%9F%A5%E8%AF%A2%E8%AE%A2%E9%98%85%E5%88%97%E8%A1%A8
     * @param username  (required)
     * @param pageNum 要查询的页码。该参数的值须大于等于 1。若不传，默认值为 1 (optional)
     * @param pageSize 每页显示的订阅用户数量。取值范围为 [1,500]，若不传默认值为 1 (optional)
     * @return EMGetUserSubscriptionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetUserSubscriptionListResult getUserSubscriptionList(String username, Integer pageNum, Integer pageSize) throws ApiException {
        ApiResponse<EMGetUserSubscriptionListResult> localVarResp = getUserSubscriptionListWithHttpInfo(username, pageNum, pageSize);
        return localVarResp.getData();
    }

    /**
     * 查询订阅列表
     * 查询当前用户已订阅在线状态的用户列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%9F%A5%E8%AF%A2%E8%AE%A2%E9%98%85%E5%88%97%E8%A1%A8
     * @param username  (required)
     * @param pageNum 要查询的页码。该参数的值须大于等于 1。若不传，默认值为 1 (optional)
     * @param pageSize 每页显示的订阅用户数量。取值范围为 [1,500]，若不传默认值为 1 (optional)
     * @return ApiResponse&lt;EMGetUserSubscriptionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetUserSubscriptionListResult> getUserSubscriptionListWithHttpInfo(String username, Integer pageNum, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getUserSubscriptionListValidateBeforeCall(username, pageNum, pageSize, null);
        Type localVarReturnType = new TypeToken<EMGetUserSubscriptionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询订阅列表 (asynchronously)
     * 查询当前用户已订阅在线状态的用户列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%9F%A5%E8%AF%A2%E8%AE%A2%E9%98%85%E5%88%97%E8%A1%A8
     * @param username  (required)
     * @param pageNum 要查询的页码。该参数的值须大于等于 1。若不传，默认值为 1 (optional)
     * @param pageSize 每页显示的订阅用户数量。取值范围为 [1,500]，若不传默认值为 1 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getUserSubscriptionListAsync(String username, Integer pageNum, Integer pageSize, final ApiCallback<EMGetUserSubscriptionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSubscriptionListValidateBeforeCall(username, pageNum, pageSize, _callback);
        Type localVarReturnType = new TypeToken<EMGetUserSubscriptionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setUserPresenceStatus
     * @param username  (required)
     * @param resource 要设置用户在哪个设备的在线状态信息，即传入服务器分配给每个设备资源的唯一标识符，格式为 {device type}_{resource ID}，其中设备类型 device type 可以是 android、ios 或 web，资源 ID resource ID 由 SDK 分配。例如，android_123423453246 (required)
     * @param status 用户的在线状态： - 0：离线； - 1：在线； - 其它数字字符串：自定义在线状态 (required)
     * @param emSetUserPresenceStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call setUserPresenceStatusCall(String username, String resource, String status, EMSetUserPresenceStatus emSetUserPresenceStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emSetUserPresenceStatus;

        // create path and map variables
        String localVarPath = "/users/{username}/presence/{resource}/{status}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "resource" + "}", localVarApiClient.escapeString(resource.toString()))
            .replace("{" + "status" + "}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserPresenceStatusValidateBeforeCall(String username, String resource, String status, EMSetUserPresenceStatus emSetUserPresenceStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling setUserPresenceStatus(Async)");
        }

        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling setUserPresenceStatus(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling setUserPresenceStatus(Async)");
        }

        return setUserPresenceStatusCall(username, resource, status, emSetUserPresenceStatus, _callback);

    }

    /**
     * 设置用户在线状态信息
     * 可以设置用户在指定设备的在线状态信息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF
     * @param username  (required)
     * @param resource 要设置用户在哪个设备的在线状态信息，即传入服务器分配给每个设备资源的唯一标识符，格式为 {device type}_{resource ID}，其中设备类型 device type 可以是 android、ios 或 web，资源 ID resource ID 由 SDK 分配。例如，android_123423453246 (required)
     * @param status 用户的在线状态： - 0：离线； - 1：在线； - 其它数字字符串：自定义在线状态 (required)
     * @param emSetUserPresenceStatus  (optional)
     * @return EMSetUserPresenceStatusResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSetUserPresenceStatusResult setUserPresenceStatus(String username, String resource, String status, EMSetUserPresenceStatus emSetUserPresenceStatus) throws ApiException {
        ApiResponse<EMSetUserPresenceStatusResult> localVarResp = setUserPresenceStatusWithHttpInfo(username, resource, status, emSetUserPresenceStatus);
        return localVarResp.getData();
    }

    /**
     * 设置用户在线状态信息
     * 可以设置用户在指定设备的在线状态信息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF
     * @param username  (required)
     * @param resource 要设置用户在哪个设备的在线状态信息，即传入服务器分配给每个设备资源的唯一标识符，格式为 {device type}_{resource ID}，其中设备类型 device type 可以是 android、ios 或 web，资源 ID resource ID 由 SDK 分配。例如，android_123423453246 (required)
     * @param status 用户的在线状态： - 0：离线； - 1：在线； - 其它数字字符串：自定义在线状态 (required)
     * @param emSetUserPresenceStatus  (optional)
     * @return ApiResponse&lt;EMSetUserPresenceStatusResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSetUserPresenceStatusResult> setUserPresenceStatusWithHttpInfo(String username, String resource, String status, EMSetUserPresenceStatus emSetUserPresenceStatus) throws ApiException {
        okhttp3.Call localVarCall = setUserPresenceStatusValidateBeforeCall(username, resource, status, emSetUserPresenceStatus, null);
        Type localVarReturnType = new TypeToken<EMSetUserPresenceStatusResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 设置用户在线状态信息 (asynchronously)
     * 可以设置用户在指定设备的在线状态信息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF
     * @param username  (required)
     * @param resource 要设置用户在哪个设备的在线状态信息，即传入服务器分配给每个设备资源的唯一标识符，格式为 {device type}_{resource ID}，其中设备类型 device type 可以是 android、ios 或 web，资源 ID resource ID 由 SDK 分配。例如，android_123423453246 (required)
     * @param status 用户的在线状态： - 0：离线； - 1：在线； - 其它数字字符串：自定义在线状态 (required)
     * @param emSetUserPresenceStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call setUserPresenceStatusAsync(String username, String resource, String status, EMSetUserPresenceStatus emSetUserPresenceStatus, final ApiCallback<EMSetUserPresenceStatusResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUserPresenceStatusValidateBeforeCall(username, resource, status, emSetUserPresenceStatus, _callback);
        Type localVarReturnType = new TypeToken<EMSetUserPresenceStatusResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscribeMultipleUsersPresenceStatus
     * @param username  (required)
     * @param expiry 订阅时长，单位为秒，最大值为 2,592,000，即 30 天 (required)
     * @param emSubscribeMultipleUsersPresenceStatus  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call subscribeMultipleUsersPresenceStatusCall(String username, String expiry, EMSubscribeMultipleUsersPresenceStatus emSubscribeMultipleUsersPresenceStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emSubscribeMultipleUsersPresenceStatus;

        // create path and map variables
        String localVarPath = "/users/{username}/presence/{expiry}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "expiry" + "}", localVarApiClient.escapeString(expiry.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeMultipleUsersPresenceStatusValidateBeforeCall(String username, String expiry, EMSubscribeMultipleUsersPresenceStatus emSubscribeMultipleUsersPresenceStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling subscribeMultipleUsersPresenceStatus(Async)");
        }

        // verify the required parameter 'expiry' is set
        if (expiry == null) {
            throw new ApiException("Missing the required parameter 'expiry' when calling subscribeMultipleUsersPresenceStatus(Async)");
        }

        return subscribeMultipleUsersPresenceStatusCall(username, expiry, emSubscribeMultipleUsersPresenceStatus, _callback);

    }

    /**
     * 批量订阅在线状态
     * 一次可订阅多个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%89%B9%E9%87%8F%E8%AE%A2%E9%98%85%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param expiry 订阅时长，单位为秒，最大值为 2,592,000，即 30 天 (required)
     * @param emSubscribeMultipleUsersPresenceStatus  (optional)
     * @return EMSubscribeMultipleUsersPresenceStatusResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSubscribeMultipleUsersPresenceStatusResult subscribeMultipleUsersPresenceStatus(String username, String expiry, EMSubscribeMultipleUsersPresenceStatus emSubscribeMultipleUsersPresenceStatus) throws ApiException {
        ApiResponse<EMSubscribeMultipleUsersPresenceStatusResult> localVarResp = subscribeMultipleUsersPresenceStatusWithHttpInfo(username, expiry, emSubscribeMultipleUsersPresenceStatus);
        return localVarResp.getData();
    }

    /**
     * 批量订阅在线状态
     * 一次可订阅多个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%89%B9%E9%87%8F%E8%AE%A2%E9%98%85%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param expiry 订阅时长，单位为秒，最大值为 2,592,000，即 30 天 (required)
     * @param emSubscribeMultipleUsersPresenceStatus  (optional)
     * @return ApiResponse&lt;EMSubscribeMultipleUsersPresenceStatusResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSubscribeMultipleUsersPresenceStatusResult> subscribeMultipleUsersPresenceStatusWithHttpInfo(String username, String expiry, EMSubscribeMultipleUsersPresenceStatus emSubscribeMultipleUsersPresenceStatus) throws ApiException {
        okhttp3.Call localVarCall = subscribeMultipleUsersPresenceStatusValidateBeforeCall(username, expiry, emSubscribeMultipleUsersPresenceStatus, null);
        Type localVarReturnType = new TypeToken<EMSubscribeMultipleUsersPresenceStatusResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量订阅在线状态 (asynchronously)
     * 一次可订阅多个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E6%89%B9%E9%87%8F%E8%AE%A2%E9%98%85%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param expiry 订阅时长，单位为秒，最大值为 2,592,000，即 30 天 (required)
     * @param emSubscribeMultipleUsersPresenceStatus  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call subscribeMultipleUsersPresenceStatusAsync(String username, String expiry, EMSubscribeMultipleUsersPresenceStatus emSubscribeMultipleUsersPresenceStatus, final ApiCallback<EMSubscribeMultipleUsersPresenceStatusResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribeMultipleUsersPresenceStatusValidateBeforeCall(username, expiry, emSubscribeMultipleUsersPresenceStatus, _callback);
        Type localVarReturnType = new TypeToken<EMSubscribeMultipleUsersPresenceStatusResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unsubscribeMultipleUsersPresenceStatus
     * @param username  (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call unsubscribeMultipleUsersPresenceStatusCall(String username, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/users/{username}/presence"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unsubscribeMultipleUsersPresenceStatusValidateBeforeCall(String username, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling unsubscribeMultipleUsersPresenceStatus(Async)");
        }

        return unsubscribeMultipleUsersPresenceStatusCall(username, requestBody, _callback);

    }

    /**
     * 取消订阅多个用户的在线状态
     * 取消订阅多个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E5%8F%96%E6%B6%88%E8%AE%A2%E9%98%85%E5%A4%9A%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param requestBody  (optional)
     * @return EMUnsubscribeMultipleUsersPresenceStatusResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMUnsubscribeMultipleUsersPresenceStatusResult unsubscribeMultipleUsersPresenceStatus(String username, List<String> requestBody) throws ApiException {
        ApiResponse<EMUnsubscribeMultipleUsersPresenceStatusResult> localVarResp = unsubscribeMultipleUsersPresenceStatusWithHttpInfo(username, requestBody);
        return localVarResp.getData();
    }

    /**
     * 取消订阅多个用户的在线状态
     * 取消订阅多个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E5%8F%96%E6%B6%88%E8%AE%A2%E9%98%85%E5%A4%9A%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;EMUnsubscribeMultipleUsersPresenceStatusResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMUnsubscribeMultipleUsersPresenceStatusResult> unsubscribeMultipleUsersPresenceStatusWithHttpInfo(String username, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = unsubscribeMultipleUsersPresenceStatusValidateBeforeCall(username, requestBody, null);
        Type localVarReturnType = new TypeToken<EMUnsubscribeMultipleUsersPresenceStatusResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 取消订阅多个用户的在线状态 (asynchronously)
     * 取消订阅多个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/presence.html#%E5%8F%96%E6%B6%88%E8%AE%A2%E9%98%85%E5%A4%9A%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call unsubscribeMultipleUsersPresenceStatusAsync(String username, List<String> requestBody, final ApiCallback<EMUnsubscribeMultipleUsersPresenceStatusResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = unsubscribeMultipleUsersPresenceStatusValidateBeforeCall(username, requestBody, _callback);
        Type localVarReturnType = new TypeToken<EMUnsubscribeMultipleUsersPresenceStatusResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
