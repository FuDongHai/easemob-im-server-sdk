/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMOfflinePushNewResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-19T14:46:11.706022+08:00[Asia/Shanghai]")
public class EMOfflinePushNewResource {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_IGNORE_DURATION = "ignoreDuration";
  @SerializedName(SERIALIZED_NAME_IGNORE_DURATION)
  private BigDecimal ignoreDuration;

  public static final String SERIALIZED_NAME_IGNORE_INTERVAL = "ignoreInterval";
  @SerializedName(SERIALIZED_NAME_IGNORE_INTERVAL)
  private String ignoreInterval;

  public EMOfflinePushNewResource() {
  }

  public EMOfflinePushNewResource type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * 离线推送通知方式
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public EMOfflinePushNewResource ignoreDuration(BigDecimal ignoreDuration) {
    
    this.ignoreDuration = ignoreDuration;
    return this;
  }

   /**
   * 离线推送免打扰时长
   * @return ignoreDuration
  **/
  @javax.annotation.Nullable
  public BigDecimal getIgnoreDuration() {
    return ignoreDuration;
  }


  public void setIgnoreDuration(BigDecimal ignoreDuration) {
    this.ignoreDuration = ignoreDuration;
  }


  public EMOfflinePushNewResource ignoreInterval(String ignoreInterval) {
    
    this.ignoreInterval = ignoreInterval;
    return this;
  }

   /**
   * 离线推送免打扰时间段
   * @return ignoreInterval
  **/
  @javax.annotation.Nullable
  public String getIgnoreInterval() {
    return ignoreInterval;
  }


  public void setIgnoreInterval(String ignoreInterval) {
    this.ignoreInterval = ignoreInterval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMOfflinePushNewResource offlinePushNewResource = (EMOfflinePushNewResource) o;
    return Objects.equals(this.type, offlinePushNewResource.type) &&
        Objects.equals(this.ignoreDuration, offlinePushNewResource.ignoreDuration) &&
        Objects.equals(this.ignoreInterval, offlinePushNewResource.ignoreInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, ignoreDuration, ignoreInterval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMOfflinePushNewResource {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ignoreDuration: ").append(toIndentedString(ignoreDuration)).append("\n");
    sb.append("    ignoreInterval: ").append(toIndentedString(ignoreInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("ignoreDuration");
    openapiFields.add("ignoreInterval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMOfflinePushNewResource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMOfflinePushNewResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMOfflinePushNewResource is not found in the empty JSON string", EMOfflinePushNewResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMOfflinePushNewResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMOfflinePushNewResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("ignoreInterval") != null && !jsonObj.get("ignoreInterval").isJsonNull()) && !jsonObj.get("ignoreInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoreInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ignoreInterval").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMOfflinePushNewResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMOfflinePushNewResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMOfflinePushNewResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMOfflinePushNewResource.class));

       return (TypeAdapter<T>) new TypeAdapter<EMOfflinePushNewResource>() {
           @Override
           public void write(JsonWriter out, EMOfflinePushNewResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMOfflinePushNewResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMOfflinePushNewResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMOfflinePushNewResource
  * @throws IOException if the JSON string is invalid with respect to EMOfflinePushNewResource
  */
  public static EMOfflinePushNewResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMOfflinePushNewResource.class);
  }

 /**
  * Convert an instance of EMOfflinePushNewResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

