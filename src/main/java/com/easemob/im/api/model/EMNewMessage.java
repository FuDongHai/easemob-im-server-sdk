/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMNewMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:20:33.693628+08:00[Asia/Shanghai]")
public class EMNewMessage {
    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    private String type;

    public static final String SERIALIZED_NAME_MSG = "msg";
    @SerializedName(SERIALIZED_NAME_MSG)
    private String msg;

    public static final String SERIALIZED_NAME_CUSTOM_EVENT = "customEvent";
    @SerializedName(SERIALIZED_NAME_CUSTOM_EVENT)
    private String customEvent;

    public static final String SERIALIZED_NAME_CUSTOM_EXTS = "customExts";
    @SerializedName(SERIALIZED_NAME_CUSTOM_EXTS)
    private Object customExts;

    public EMNewMessage() {
    }

    public EMNewMessage type(String type) {

        this.type = type;
        return this;
    }

    /**
     * 修改的消息类型： - txt：文本消息； - custom：自定义消息
     * @return type
     **/
    @javax.annotation.Nullable
    public String getType() {
        return type;
    }


    public void setType(String type) {
        this.type = type;
    }


    public EMNewMessage msg(String msg) {

        this.msg = msg;
        return this;
    }

    /**
     * 修改后的消息内容。该字段只对文本消息生效
     * @return msg
     **/
    @javax.annotation.Nullable
    public String getMsg() {
        return msg;
    }


    public void setMsg(String msg) {
        this.msg = msg;
    }


    public EMNewMessage customEvent(String customEvent) {

        this.customEvent = customEvent;
        return this;
    }

    /**
     * 用户自定义的事件类型。该参数的值必须满足正则表达式 [a-zA-Z0-9-_/\\.]{1,32}，长度为 1-32 个字符。该字段只对自定义消息生效
     * @return customEvent
     **/
    @javax.annotation.Nullable
    public String getCustomEvent() {
        return customEvent;
    }


    public void setCustomEvent(String customEvent) {
        this.customEvent = customEvent;
    }


    public EMNewMessage customExts(Object customExts) {

        this.customExts = customExts;
        return this;
    }

    /**
     * 用户自定义的事件属性，类型必须是 Map&lt;String,String&gt;，最多可以包含 16 个元素。该字段只对自定义消息生效
     * @return customExts
     **/
    @javax.annotation.Nullable
    public Object getCustomExts() {
        return customExts;
    }


    public void setCustomExts(Object customExts) {
        this.customExts = customExts;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EMNewMessage newMessage = (EMNewMessage) o;
        return Objects.equals(this.type, newMessage.type) &&
                Objects.equals(this.msg, newMessage.msg) &&
                Objects.equals(this.customEvent, newMessage.customEvent) &&
                Objects.equals(this.customExts, newMessage.customExts);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, msg, customEvent, customExts);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EMNewMessage {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
        sb.append("    customEvent: ").append(toIndentedString(customEvent)).append("\n");
        sb.append("    customExts: ").append(toIndentedString(customExts)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("type");
        openapiFields.add("msg");
        openapiFields.add("customEvent");
        openapiFields.add("customExts");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EMNewMessage
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EMNewMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in EMNewMessage is not found in the empty JSON string", EMNewMessage.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EMNewMessage.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMNewMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("msg") != null && !jsonObj.get("msg").isJsonNull()) && !jsonObj.get("msg").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `msg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msg").toString()));
        }
        if ((jsonObj.get("customEvent") != null && !jsonObj.get("customEvent").isJsonNull()) && !jsonObj.get("customEvent").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `customEvent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customEvent").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EMNewMessage.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EMNewMessage' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EMNewMessage> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(EMNewMessage.class));

            return (TypeAdapter<T>) new TypeAdapter<EMNewMessage>() {
                @Override
                public void write(JsonWriter out, EMNewMessage value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public EMNewMessage read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of EMNewMessage given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EMNewMessage
     * @throws IOException if the JSON string is invalid with respect to EMNewMessage
     */
    public static EMNewMessage fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EMNewMessage.class);
    }

    /**
     * Convert an instance of EMNewMessage to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

