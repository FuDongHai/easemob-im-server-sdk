/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.easemob.im.api.model.EMNewMessage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMModifyTextOrCustomizeMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:01:34.860826+08:00[Asia/Shanghai]")
public class EMModifyTextOrCustomizeMessage {
  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_NEW_MSG = "new_msg";
  @SerializedName(SERIALIZED_NAME_NEW_MSG)
  private EMNewMessage newMsg;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_NEW_EXT = "new_ext";
  @SerializedName(SERIALIZED_NAME_NEW_EXT)
  private Object newExt;

  public static final String SERIALIZED_NAME_IS_COMBINE_EXT = "is_combine_ext";
  @SerializedName(SERIALIZED_NAME_IS_COMBINE_EXT)
  private Boolean isCombineExt;

  public EMModifyTextOrCustomizeMessage() {
  }

  public EMModifyTextOrCustomizeMessage user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * 修改消息的用户
   * @return user
  **/
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public EMModifyTextOrCustomizeMessage newMsg(EMNewMessage newMsg) {
    
    this.newMsg = newMsg;
    return this;
  }

   /**
   * Get newMsg
   * @return newMsg
  **/
  @javax.annotation.Nonnull
  public EMNewMessage getNewMsg() {
    return newMsg;
  }


  public void setNewMsg(EMNewMessage newMsg) {
    this.newMsg = newMsg;
  }


  public EMModifyTextOrCustomizeMessage type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * 消息类型： - txt：文本消息； - img：图片消息； - audio：语音消息； - video：视频消息； - file：文件消息； - loc：位置消息； - cmd：透传消息； - custom：自定义消息
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public EMModifyTextOrCustomizeMessage newExt(Object newExt) {
    
    this.newExt = newExt;
    return this;
  }

   /**
   * 修改后的消息扩展信息
   * @return newExt
  **/
  @javax.annotation.Nullable
  public Object getNewExt() {
    return newExt;
  }


  public void setNewExt(Object newExt) {
    this.newExt = newExt;
  }


  public EMModifyTextOrCustomizeMessage isCombineExt(Boolean isCombineExt) {
    
    this.isCombineExt = isCombineExt;
    return this;
  }

   /**
   * 修改后的消息扩展信息与原有扩展信息是合并还是替换。 - （默认）true：合并； - false：替换
   * @return isCombineExt
  **/
  @javax.annotation.Nullable
  public Boolean getIsCombineExt() {
    return isCombineExt;
  }


  public void setIsCombineExt(Boolean isCombineExt) {
    this.isCombineExt = isCombineExt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMModifyTextOrCustomizeMessage modifyTextOrCustomizeMessage = (EMModifyTextOrCustomizeMessage) o;
    return Objects.equals(this.user, modifyTextOrCustomizeMessage.user) &&
        Objects.equals(this.newMsg, modifyTextOrCustomizeMessage.newMsg) &&
        Objects.equals(this.type, modifyTextOrCustomizeMessage.type) &&
        Objects.equals(this.newExt, modifyTextOrCustomizeMessage.newExt) &&
        Objects.equals(this.isCombineExt, modifyTextOrCustomizeMessage.isCombineExt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, newMsg, type, newExt, isCombineExt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMModifyTextOrCustomizeMessage {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    newMsg: ").append(toIndentedString(newMsg)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    newExt: ").append(toIndentedString(newExt)).append("\n");
    sb.append("    isCombineExt: ").append(toIndentedString(isCombineExt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user");
    openapiFields.add("new_msg");
    openapiFields.add("type");
    openapiFields.add("new_ext");
    openapiFields.add("is_combine_ext");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("new_msg");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMModifyTextOrCustomizeMessage
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMModifyTextOrCustomizeMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMModifyTextOrCustomizeMessage is not found in the empty JSON string", EMModifyTextOrCustomizeMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMModifyTextOrCustomizeMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMModifyTextOrCustomizeMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EMModifyTextOrCustomizeMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      // validate the required field `new_msg`
      EMNewMessage.validateJsonElement(jsonObj.get("new_msg"));
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMModifyTextOrCustomizeMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMModifyTextOrCustomizeMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMModifyTextOrCustomizeMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMModifyTextOrCustomizeMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<EMModifyTextOrCustomizeMessage>() {
           @Override
           public void write(JsonWriter out, EMModifyTextOrCustomizeMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMModifyTextOrCustomizeMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMModifyTextOrCustomizeMessage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMModifyTextOrCustomizeMessage
  * @throws IOException if the JSON string is invalid with respect to EMModifyTextOrCustomizeMessage
  */
  public static EMModifyTextOrCustomizeMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMModifyTextOrCustomizeMessage.class);
  }

 /**
  * Convert an instance of EMModifyTextOrCustomizeMessage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

