/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMRemoveUserToGroupResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-04T10:11:59.479292+08:00[Asia/Shanghai]")
public class EMRemoveUserToGroupResource {
    public static final String SERIALIZED_NAME_RESULT = "result";
    @SerializedName(SERIALIZED_NAME_RESULT)
    private Boolean result;

    public static final String SERIALIZED_NAME_ACTION = "action";
    @SerializedName(SERIALIZED_NAME_ACTION)
    private String action;

    public static final String SERIALIZED_NAME_USER = "user";
    @SerializedName(SERIALIZED_NAME_USER)
    private String user;

    public static final String SERIALIZED_NAME_GROUPID = "groupid";
    @SerializedName(SERIALIZED_NAME_GROUPID)
    private String groupid;

    public EMRemoveUserToGroupResource() {
    }

    public EMRemoveUserToGroupResource result(Boolean result) {

        this.result = result;
        return this;
    }

    /**
     * Get result
     * @return result
     **/
    @javax.annotation.Nullable
    public Boolean getResult() {
        return result;
    }


    public void setResult(Boolean result) {
        this.result = result;
    }


    public EMRemoveUserToGroupResource action(String action) {

        this.action = action;
        return this;
    }

    /**
     * Get action
     * @return action
     **/
    @javax.annotation.Nullable
    public String getAction() {
        return action;
    }


    public void setAction(String action) {
        this.action = action;
    }


    public EMRemoveUserToGroupResource user(String user) {

        this.user = user;
        return this;
    }

    /**
     * Get user
     * @return user
     **/
    @javax.annotation.Nullable
    public String getUser() {
        return user;
    }


    public void setUser(String user) {
        this.user = user;
    }


    public EMRemoveUserToGroupResource groupid(String groupid) {

        this.groupid = groupid;
        return this;
    }

    /**
     * Get groupid
     * @return groupid
     **/
    @javax.annotation.Nullable
    public String getGroupid() {
        return groupid;
    }


    public void setGroupid(String groupid) {
        this.groupid = groupid;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EMRemoveUserToGroupResource removeUserToGroupResource = (EMRemoveUserToGroupResource) o;
        return Objects.equals(this.result, removeUserToGroupResource.result) &&
                Objects.equals(this.action, removeUserToGroupResource.action) &&
                Objects.equals(this.user, removeUserToGroupResource.user) &&
                Objects.equals(this.groupid, removeUserToGroupResource.groupid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(result, action, user, groupid);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EMRemoveUserToGroupResource {\n");
        sb.append("    result: ").append(toIndentedString(result)).append("\n");
        sb.append("    action: ").append(toIndentedString(action)).append("\n");
        sb.append("    user: ").append(toIndentedString(user)).append("\n");
        sb.append("    groupid: ").append(toIndentedString(groupid)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("result");
        openapiFields.add("action");
        openapiFields.add("user");
        openapiFields.add("groupid");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EMRemoveUserToGroupResource
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EMRemoveUserToGroupResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in EMRemoveUserToGroupResource is not found in the empty JSON string", EMRemoveUserToGroupResource.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EMRemoveUserToGroupResource.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMRemoveUserToGroupResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
        }
        if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
        }
        if ((jsonObj.get("groupid") != null && !jsonObj.get("groupid").isJsonNull()) && !jsonObj.get("groupid").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupid").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EMRemoveUserToGroupResource.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EMRemoveUserToGroupResource' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EMRemoveUserToGroupResource> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(EMRemoveUserToGroupResource.class));

            return (TypeAdapter<T>) new TypeAdapter<EMRemoveUserToGroupResource>() {
                @Override
                public void write(JsonWriter out, EMRemoveUserToGroupResource value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public EMRemoveUserToGroupResource read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of EMRemoveUserToGroupResource given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EMRemoveUserToGroupResource
     * @throws IOException if the JSON string is invalid with respect to EMRemoveUserToGroupResource
     */
    public static EMRemoveUserToGroupResource fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EMRemoveUserToGroupResource.class);
    }

    /**
     * Convert an instance of EMRemoveUserToGroupResource to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

