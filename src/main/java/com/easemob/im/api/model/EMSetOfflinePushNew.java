/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMSetOfflinePushNew
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-19T14:46:11.706022+08:00[Asia/Shanghai]")
public class EMSetOfflinePushNew {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_IGNORE_INTERVAL = "ignoreInterval";
  @SerializedName(SERIALIZED_NAME_IGNORE_INTERVAL)
  private String ignoreInterval;

  public static final String SERIALIZED_NAME_IGNORE_DURATION = "ignoreDuration";
  @SerializedName(SERIALIZED_NAME_IGNORE_DURATION)
  private BigDecimal ignoreDuration;

  public EMSetOfflinePushNew() {
  }

  public EMSetOfflinePushNew type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * 离线推送通知方式： - DEFAULT：指定的会话采用 app 的设置。该值仅对单聊或群聊会话有效，对 app 级别无效。 - ALL：接收全部离线消息的推送通知； - AT：只接收提及当前用户的离线消息的推送通知。该字段推荐在群聊中使用。若提及一个或多个用户，需在创建消息时对 ext 字段传 \&quot;em_at_list\&quot;:[\&quot;user1\&quot;, \&quot;user2\&quot; ...]；若提及所有人，对该字段传 \&quot;em_at_list\&quot;:\&quot;all\&quot;。 - NONE：不接收离线消息的推送通知 注意：若 app 和指定会话均设置了该参数，则该会话采用自身的设置，其他会话采用 app 的设置
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public EMSetOfflinePushNew ignoreInterval(String ignoreInterval) {
    
    this.ignoreInterval = ignoreInterval;
    return this;
  }

   /**
   * 每天触发离线推送免打扰的时间段，精确到分钟，格式为 HH:MM-HH:MM，例如 08:30-10:00。该时间为 24 小时制，免打扰时间段的开始时间和结束时间中的小时数和分钟数的取值范围分别为 [00,23] 和 [00,59]。 该参数的设置说明如下： - 该参数仅针对 app 生效，对单聊或群聊不生效。 - 该参数设置后，免打扰模式每天定时触发。例如，开始时间为 08:00，结束时间为 10:00，免打扰模式在每天的 8:00-10:00 内生效。若你在 11:00 设置开始时间为 08:00，结束时间为 12:00，则免打扰模式在当天的 11:00-12:00 生效，以后每天均在 8:00-12:00 生效。 - 若开始时间和结束时间相同，则全天免打扰。 - 若结束时间早于开始时间，则免打扰模式在每天的开始时间到次日的结束时间内生效。例如，开始时间为 10:00，结束时间为 08:00，则免打扰模式的在当天的 10:00 到次日的 8:00 生效。 - 目前仅支持在每天的一个指定时间段内开启免打扰模式，不支持多个免打扰时间段，新的设置会覆盖之前的设置。 - 若不设置该参数，传空字符串。 - 若该参数和 ignoreDuration 均设置，免打扰模式当日在这两个时间段均生效，例如，例如，上午 8:00 将 app 级的 ignoreInterval 设置为 8:00-10:00，ignoreDuration 设置为 14400000 毫秒（4 个小时），则 app 在今天 8:00-12:00 和以后每天 8:00-10:00 处于免打扰模式
   * @return ignoreInterval
  **/
  @javax.annotation.Nullable
  public String getIgnoreInterval() {
    return ignoreInterval;
  }


  public void setIgnoreInterval(String ignoreInterval) {
    this.ignoreInterval = ignoreInterval;
  }


  public EMSetOfflinePushNew ignoreDuration(BigDecimal ignoreDuration) {
    
    this.ignoreDuration = ignoreDuration;
    return this;
  }

   /**
   * 离线推送免打扰时长，单位为毫秒。该参数的取值范围为 [0,604800000]，0 表示该参数无效，604800000 表示免打扰模式持续 7 天。 - 该参数对 app 和单聊和群聊均生效。 - 与 ignoreInterval 的设置每天生效不同，该参数为一次有效，设置后立即生效，例如，上午 8:00 将 app 层级的 ignoreDuration 设置为 14400000 毫秒（4 个小时），则 app 只在今天 8:00-12:00 处于免打扰模式。 - 若该参数和 ignoreDuration 均设置，免打扰模式当日在这两个时间段均生效，例如，上午 8:00 将 app 级的 ignoreInterval 设置为 8:00-10:00，ignoreDuration 设置为 14400000 毫秒（4 个小时），则 app 在今天 8:00-12:00 和以后每天 8:00-10:00 处于免打扰模式
   * @return ignoreDuration
  **/
  @javax.annotation.Nullable
  public BigDecimal getIgnoreDuration() {
    return ignoreDuration;
  }


  public void setIgnoreDuration(BigDecimal ignoreDuration) {
    this.ignoreDuration = ignoreDuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMSetOfflinePushNew setOfflinePushNew = (EMSetOfflinePushNew) o;
    return Objects.equals(this.type, setOfflinePushNew.type) &&
        Objects.equals(this.ignoreInterval, setOfflinePushNew.ignoreInterval) &&
        Objects.equals(this.ignoreDuration, setOfflinePushNew.ignoreDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, ignoreInterval, ignoreDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMSetOfflinePushNew {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ignoreInterval: ").append(toIndentedString(ignoreInterval)).append("\n");
    sb.append("    ignoreDuration: ").append(toIndentedString(ignoreDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("ignoreInterval");
    openapiFields.add("ignoreDuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMSetOfflinePushNew
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMSetOfflinePushNew.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMSetOfflinePushNew is not found in the empty JSON string", EMSetOfflinePushNew.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMSetOfflinePushNew.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMSetOfflinePushNew` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("ignoreInterval") != null && !jsonObj.get("ignoreInterval").isJsonNull()) && !jsonObj.get("ignoreInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoreInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ignoreInterval").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMSetOfflinePushNew.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMSetOfflinePushNew' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMSetOfflinePushNew> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMSetOfflinePushNew.class));

       return (TypeAdapter<T>) new TypeAdapter<EMSetOfflinePushNew>() {
           @Override
           public void write(JsonWriter out, EMSetOfflinePushNew value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMSetOfflinePushNew read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMSetOfflinePushNew given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMSetOfflinePushNew
  * @throws IOException if the JSON string is invalid with respect to EMSetOfflinePushNew
  */
  public static EMSetOfflinePushNew fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMSetOfflinePushNew.class);
  }

 /**
  * Convert an instance of EMSetOfflinePushNew to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

