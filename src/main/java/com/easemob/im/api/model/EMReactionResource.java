/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMReactionResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-19T14:46:11.706022+08:00[Asia/Shanghai]")
public class EMReactionResource {
  public static final String SERIALIZED_NAME_REACTION_ID = "reactionId";
  @SerializedName(SERIALIZED_NAME_REACTION_ID)
  private String reactionId;

  public static final String SERIALIZED_NAME_REACTION = "reaction";
  @SerializedName(SERIALIZED_NAME_REACTION)
  private String reaction;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Boolean state;

  public static final String SERIALIZED_NAME_USER_LIST = "userList";
  @SerializedName(SERIALIZED_NAME_USER_LIST)
  private List<String> userList;

  public static final String SERIALIZED_NAME_CURSOR = "cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private String cursor;

  public EMReactionResource() {
  }

  public EMReactionResource reactionId(String reactionId) {
    
    this.reactionId = reactionId;
    return this;
  }

   /**
   * Reaction ID
   * @return reactionId
  **/
  @javax.annotation.Nullable
  public String getReactionId() {
    return reactionId;
  }


  public void setReactionId(String reactionId) {
    this.reactionId = reactionId;
  }


  public EMReactionResource reaction(String reaction) {
    
    this.reaction = reaction;
    return this;
  }

   /**
   * 表情 ID，与客户端一致。该参数与创建/追加 Reaction API的请求参数 message 相同
   * @return reaction
  **/
  @javax.annotation.Nullable
  public String getReaction() {
    return reaction;
  }


  public void setReaction(String reaction) {
    this.reaction = reaction;
  }


  public EMReactionResource count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * 添加该 Reaction 的用户人数
   * @return count
  **/
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public EMReactionResource state(Boolean state) {
    
    this.state = state;
    return this;
  }

   /**
   * 当前请求用户是否添加过该 Reaction： - true：是 - false：否
   * @return state
  **/
  @javax.annotation.Nullable
  public Boolean getState() {
    return state;
  }


  public void setState(Boolean state) {
    this.state = state;
  }


  public EMReactionResource userList(List<String> userList) {
    
    this.userList = userList;
    return this;
  }

  public EMReactionResource addUserListItem(String userListItem) {
    if (this.userList == null) {
      this.userList = new ArrayList<>();
    }
    this.userList.add(userListItem);
    return this;
  }

   /**
   * 添加 Reaction 的用户 ID 列表。只返回最早操作 Reaction 的三个用户的 ID
   * @return userList
  **/
  @javax.annotation.Nullable
  public List<String> getUserList() {
    return userList;
  }


  public void setUserList(List<String> userList) {
    this.userList = userList;
  }


  public EMReactionResource cursor(String cursor) {
    
    this.cursor = cursor;
    return this;
  }

   /**
   * 查询游标，指定下次查询的起始位置
   * @return cursor
  **/
  @javax.annotation.Nullable
  public String getCursor() {
    return cursor;
  }


  public void setCursor(String cursor) {
    this.cursor = cursor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMReactionResource reactionResource = (EMReactionResource) o;
    return Objects.equals(this.reactionId, reactionResource.reactionId) &&
        Objects.equals(this.reaction, reactionResource.reaction) &&
        Objects.equals(this.count, reactionResource.count) &&
        Objects.equals(this.state, reactionResource.state) &&
        Objects.equals(this.userList, reactionResource.userList) &&
        Objects.equals(this.cursor, reactionResource.cursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reactionId, reaction, count, state, userList, cursor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMReactionResource {\n");
    sb.append("    reactionId: ").append(toIndentedString(reactionId)).append("\n");
    sb.append("    reaction: ").append(toIndentedString(reaction)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    userList: ").append(toIndentedString(userList)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reactionId");
    openapiFields.add("reaction");
    openapiFields.add("count");
    openapiFields.add("state");
    openapiFields.add("userList");
    openapiFields.add("cursor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMReactionResource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMReactionResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMReactionResource is not found in the empty JSON string", EMReactionResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMReactionResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMReactionResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reactionId") != null && !jsonObj.get("reactionId").isJsonNull()) && !jsonObj.get("reactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reactionId").toString()));
      }
      if ((jsonObj.get("reaction") != null && !jsonObj.get("reaction").isJsonNull()) && !jsonObj.get("reaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reaction").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("userList") != null && !jsonObj.get("userList").isJsonNull() && !jsonObj.get("userList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userList` to be an array in the JSON string but got `%s`", jsonObj.get("userList").toString()));
      }
      if ((jsonObj.get("cursor") != null && !jsonObj.get("cursor").isJsonNull()) && !jsonObj.get("cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cursor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMReactionResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMReactionResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMReactionResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMReactionResource.class));

       return (TypeAdapter<T>) new TypeAdapter<EMReactionResource>() {
           @Override
           public void write(JsonWriter out, EMReactionResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMReactionResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMReactionResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMReactionResource
  * @throws IOException if the JSON string is invalid with respect to EMReactionResource
  */
  public static EMReactionResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMReactionResource.class);
  }

 /**
  * Convert an instance of EMReactionResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

