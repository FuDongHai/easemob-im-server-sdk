/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMSetPushBindingInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-19T14:46:11.706022+08:00[Asia/Shanghai]")
public class EMSetPushBindingInfo {
  public static final String SERIALIZED_NAME_DEVICE_ID = "device_id";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_NOTIFIER_NAME = "notifier_name";
  @SerializedName(SERIALIZED_NAME_NOTIFIER_NAME)
  private String notifierName;

  public static final String SERIALIZED_NAME_DEVICE_TOKEN = "device_token";
  @SerializedName(SERIALIZED_NAME_DEVICE_TOKEN)
  private String deviceToken;

  public EMSetPushBindingInfo() {
  }

  public EMSetPushBindingInfo deviceId(String deviceId) {
    
    this.deviceId = deviceId;
    return this;
  }

   /**
   * 移动端设备标识，服务端用于识别设备，进行推送信息的绑定和解绑
   * @return deviceId
  **/
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }


  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public EMSetPushBindingInfo notifierName(String notifierName) {
    
    this.notifierName = notifierName;
    return this;
  }

   /**
   * 推送证书名称。 - 传入的证书名称必需与你在环信控制台的添加推送证书页面上填写的证书名称一致，否则推送失败 - 若 notifier_name 为空，表示解除当前设备与所有推送信息的绑定
   * @return notifierName
  **/
  @javax.annotation.Nullable
  public String getNotifierName() {
    return notifierName;
  }


  public void setNotifierName(String notifierName) {
    this.notifierName = notifierName;
  }


  public EMSetPushBindingInfo deviceToken(String deviceToken) {
    
    this.deviceToken = deviceToken;
    return this;
  }

   /**
   * 推送设备 token。错误的信息会推送失败，且服务端自动解除绑定。若 device_token 为空，则会解除当前用户当前设备 ID 和当前证书名的绑定
   * @return deviceToken
  **/
  @javax.annotation.Nullable
  public String getDeviceToken() {
    return deviceToken;
  }


  public void setDeviceToken(String deviceToken) {
    this.deviceToken = deviceToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMSetPushBindingInfo setPushBindingInfo = (EMSetPushBindingInfo) o;
    return Objects.equals(this.deviceId, setPushBindingInfo.deviceId) &&
        Objects.equals(this.notifierName, setPushBindingInfo.notifierName) &&
        Objects.equals(this.deviceToken, setPushBindingInfo.deviceToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceId, notifierName, deviceToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMSetPushBindingInfo {\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    notifierName: ").append(toIndentedString(notifierName)).append("\n");
    sb.append("    deviceToken: ").append(toIndentedString(deviceToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_id");
    openapiFields.add("notifier_name");
    openapiFields.add("device_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMSetPushBindingInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMSetPushBindingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMSetPushBindingInfo is not found in the empty JSON string", EMSetPushBindingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMSetPushBindingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMSetPushBindingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("device_id") != null && !jsonObj.get("device_id").isJsonNull()) && !jsonObj.get("device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_id").toString()));
      }
      if ((jsonObj.get("notifier_name") != null && !jsonObj.get("notifier_name").isJsonNull()) && !jsonObj.get("notifier_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notifier_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notifier_name").toString()));
      }
      if ((jsonObj.get("device_token") != null && !jsonObj.get("device_token").isJsonNull()) && !jsonObj.get("device_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMSetPushBindingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMSetPushBindingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMSetPushBindingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMSetPushBindingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EMSetPushBindingInfo>() {
           @Override
           public void write(JsonWriter out, EMSetPushBindingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMSetPushBindingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMSetPushBindingInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMSetPushBindingInfo
  * @throws IOException if the JSON string is invalid with respect to EMSetPushBindingInfo
  */
  public static EMSetPushBindingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMSetPushBindingInfo.class);
  }

 /**
  * Convert an instance of EMSetPushBindingInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

