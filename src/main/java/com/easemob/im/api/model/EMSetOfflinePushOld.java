/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMSetOfflinePushOld
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-19T14:46:11.706022+08:00[Asia/Shanghai]")
public class EMSetOfflinePushOld {
  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_NOTIFICATION_DISPLAY_STYLE = "notification_display_style";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_DISPLAY_STYLE)
  private Integer notificationDisplayStyle;

  public static final String SERIALIZED_NAME_NOTIFICATION_NO_DISTURBING = "notification_no_disturbing";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_NO_DISTURBING)
  private Boolean notificationNoDisturbing;

  public static final String SERIALIZED_NAME_NOTIFICATION_NO_DISTURBING_START = "notification_no_disturbing_start";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_NO_DISTURBING_START)
  private String notificationNoDisturbingStart;

  public static final String SERIALIZED_NAME_NOTIFICATION_NO_DISTURBING_END = "notification_no_disturbing_end";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_NO_DISTURBING_END)
  private String notificationNoDisturbingEnd;

  public EMSetOfflinePushOld() {
  }

  public EMSetOfflinePushOld nickname(String nickname) {
    
    this.nickname = nickname;
    return this;
  }

   /**
   * 离线推送时在接收方的客户端推送通知栏中显示的发送方的昵称。你可以自定义该昵称，长度不能超过 100 个字符。 支持以下字符集： - 26 个小写英文字母 a-z； - 26 个大写英文字母 A-Z； - 10 个数字 0-9； - 中文； - 特殊字符。 若不设置昵称，推送消息详情时，即设置离线推送通知的展示方式时将 notification_display_style 设置为 1，会显示发送方的用户 ID，而非昵称。 该昵称可与用户属性中的昵称设置不同，不过我们建议这两种昵称的设置保持一致。因此，修改其中一个昵称时，也需调用相应方法对另一个进行更新，确保设置一致。更新用户属性中的昵称的方法，详见 设置用户属性
   * @return nickname
  **/
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }


  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public EMSetOfflinePushOld notificationDisplayStyle(Integer notificationDisplayStyle) {
    
    this.notificationDisplayStyle = notificationDisplayStyle;
    return this;
  }

   /**
   * 离线推送通知的展示方式： -（默认）0：推送标题为“您有一条新消息”，推送内容为“请点击查看”； - 1：推送标题为“您有一条新消息”，推送内容为发送人昵称和离线消息的内容
   * @return notificationDisplayStyle
  **/
  @javax.annotation.Nullable
  public Integer getNotificationDisplayStyle() {
    return notificationDisplayStyle;
  }


  public void setNotificationDisplayStyle(Integer notificationDisplayStyle) {
    this.notificationDisplayStyle = notificationDisplayStyle;
  }


  public EMSetOfflinePushOld notificationNoDisturbing(Boolean notificationNoDisturbing) {
    
    this.notificationNoDisturbing = notificationNoDisturbing;
    return this;
  }

   /**
   * 是否设置为免打扰模式： - true：是； - false：否
   * @return notificationNoDisturbing
  **/
  @javax.annotation.Nullable
  public Boolean getNotificationNoDisturbing() {
    return notificationNoDisturbing;
  }


  public void setNotificationNoDisturbing(Boolean notificationNoDisturbing) {
    this.notificationNoDisturbing = notificationNoDisturbing;
  }


  public EMSetOfflinePushOld notificationNoDisturbingStart(String notificationNoDisturbingStart) {
    
    this.notificationNoDisturbingStart = notificationNoDisturbingStart;
    return this;
  }

   /**
   * 免打扰时间段的开始时间，精确到小时，取值范围为 [0,23]。例如 “8” 表示每日 8:00 开启免打扰模式
   * @return notificationNoDisturbingStart
  **/
  @javax.annotation.Nullable
  public String getNotificationNoDisturbingStart() {
    return notificationNoDisturbingStart;
  }


  public void setNotificationNoDisturbingStart(String notificationNoDisturbingStart) {
    this.notificationNoDisturbingStart = notificationNoDisturbingStart;
  }


  public EMSetOfflinePushOld notificationNoDisturbingEnd(String notificationNoDisturbingEnd) {
    
    this.notificationNoDisturbingEnd = notificationNoDisturbingEnd;
    return this;
  }

   /**
   * 免打扰时间段的结束时间，精确到小时，取值范围为 [0,23]。例如 “18” 表示每日 18:00 关闭免打扰模式
   * @return notificationNoDisturbingEnd
  **/
  @javax.annotation.Nullable
  public String getNotificationNoDisturbingEnd() {
    return notificationNoDisturbingEnd;
  }


  public void setNotificationNoDisturbingEnd(String notificationNoDisturbingEnd) {
    this.notificationNoDisturbingEnd = notificationNoDisturbingEnd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMSetOfflinePushOld setOfflinePushOld = (EMSetOfflinePushOld) o;
    return Objects.equals(this.nickname, setOfflinePushOld.nickname) &&
        Objects.equals(this.notificationDisplayStyle, setOfflinePushOld.notificationDisplayStyle) &&
        Objects.equals(this.notificationNoDisturbing, setOfflinePushOld.notificationNoDisturbing) &&
        Objects.equals(this.notificationNoDisturbingStart, setOfflinePushOld.notificationNoDisturbingStart) &&
        Objects.equals(this.notificationNoDisturbingEnd, setOfflinePushOld.notificationNoDisturbingEnd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nickname, notificationDisplayStyle, notificationNoDisturbing, notificationNoDisturbingStart, notificationNoDisturbingEnd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMSetOfflinePushOld {\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    notificationDisplayStyle: ").append(toIndentedString(notificationDisplayStyle)).append("\n");
    sb.append("    notificationNoDisturbing: ").append(toIndentedString(notificationNoDisturbing)).append("\n");
    sb.append("    notificationNoDisturbingStart: ").append(toIndentedString(notificationNoDisturbingStart)).append("\n");
    sb.append("    notificationNoDisturbingEnd: ").append(toIndentedString(notificationNoDisturbingEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nickname");
    openapiFields.add("notification_display_style");
    openapiFields.add("notification_no_disturbing");
    openapiFields.add("notification_no_disturbing_start");
    openapiFields.add("notification_no_disturbing_end");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMSetOfflinePushOld
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMSetOfflinePushOld.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMSetOfflinePushOld is not found in the empty JSON string", EMSetOfflinePushOld.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMSetOfflinePushOld.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMSetOfflinePushOld` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("notification_no_disturbing_start") != null && !jsonObj.get("notification_no_disturbing_start").isJsonNull()) && !jsonObj.get("notification_no_disturbing_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_no_disturbing_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_no_disturbing_start").toString()));
      }
      if ((jsonObj.get("notification_no_disturbing_end") != null && !jsonObj.get("notification_no_disturbing_end").isJsonNull()) && !jsonObj.get("notification_no_disturbing_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_no_disturbing_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_no_disturbing_end").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMSetOfflinePushOld.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMSetOfflinePushOld' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMSetOfflinePushOld> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMSetOfflinePushOld.class));

       return (TypeAdapter<T>) new TypeAdapter<EMSetOfflinePushOld>() {
           @Override
           public void write(JsonWriter out, EMSetOfflinePushOld value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMSetOfflinePushOld read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMSetOfflinePushOld given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMSetOfflinePushOld
  * @throws IOException if the JSON string is invalid with respect to EMSetOfflinePushOld
  */
  public static EMSetOfflinePushOld fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMSetOfflinePushOld.class);
  }

 /**
  * Convert an instance of EMSetOfflinePushOld to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

