/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMGroupShareFileResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-01-25T14:51:53.998371+08:00[Asia/Shanghai]")
public class EMGroupShareFileResource {
  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_FILE_ID = "file_id";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FILE_OWNER = "file_owner";
  @SerializedName(SERIALIZED_NAME_FILE_OWNER)
  private String fileOwner;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private BigDecimal fileSize;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private BigDecimal created;

  public EMGroupShareFileResource() {
  }

  public EMGroupShareFileResource groupId(String groupId) {
    
    this.groupId = groupId;
    return this;
  }

   /**
   * 群组 ID
   * @return groupId
  **/
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }


  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public EMGroupShareFileResource fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * 群组共享文件的 ID，若要下载或删除该文件需要使用该参数
   * @return fileId
  **/
  @javax.annotation.Nullable
  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public EMGroupShareFileResource fileName(String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * 群组共享文件名称
   * @return fileName
  **/
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public EMGroupShareFileResource fileOwner(String fileOwner) {
    
    this.fileOwner = fileOwner;
    return this;
  }

   /**
   * 上传群组共享文件的用户 ID
   * @return fileOwner
  **/
  @javax.annotation.Nullable
  public String getFileOwner() {
    return fileOwner;
  }


  public void setFileOwner(String fileOwner) {
    this.fileOwner = fileOwner;
  }


  public EMGroupShareFileResource fileSize(BigDecimal fileSize) {
    
    this.fileSize = fileSize;
    return this;
  }

   /**
   * 群组共享文件大小，单位为字节
   * @return fileSize
  **/
  @javax.annotation.Nullable
  public BigDecimal getFileSize() {
    return fileSize;
  }


  public void setFileSize(BigDecimal fileSize) {
    this.fileSize = fileSize;
  }


  public EMGroupShareFileResource created(BigDecimal created) {
    
    this.created = created;
    return this;
  }

   /**
   * 上传群组共享文件的时间
   * @return created
  **/
  @javax.annotation.Nullable
  public BigDecimal getCreated() {
    return created;
  }


  public void setCreated(BigDecimal created) {
    this.created = created;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMGroupShareFileResource groupShareFileResource = (EMGroupShareFileResource) o;
    return Objects.equals(this.groupId, groupShareFileResource.groupId) &&
        Objects.equals(this.fileId, groupShareFileResource.fileId) &&
        Objects.equals(this.fileName, groupShareFileResource.fileName) &&
        Objects.equals(this.fileOwner, groupShareFileResource.fileOwner) &&
        Objects.equals(this.fileSize, groupShareFileResource.fileSize) &&
        Objects.equals(this.created, groupShareFileResource.created);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, fileId, fileName, fileOwner, fileSize, created);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMGroupShareFileResource {\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileOwner: ").append(toIndentedString(fileOwner)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group_id");
    openapiFields.add("file_id");
    openapiFields.add("file_name");
    openapiFields.add("file_owner");
    openapiFields.add("file_size");
    openapiFields.add("created");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMGroupShareFileResource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMGroupShareFileResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMGroupShareFileResource is not found in the empty JSON string", EMGroupShareFileResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMGroupShareFileResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMGroupShareFileResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("group_id") != null && !jsonObj.get("group_id").isJsonNull()) && !jsonObj.get("group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_id").toString()));
      }
      if ((jsonObj.get("file_id") != null && !jsonObj.get("file_id").isJsonNull()) && !jsonObj.get("file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_id").toString()));
      }
      if ((jsonObj.get("file_name") != null && !jsonObj.get("file_name").isJsonNull()) && !jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
      if ((jsonObj.get("file_owner") != null && !jsonObj.get("file_owner").isJsonNull()) && !jsonObj.get("file_owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_owner").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMGroupShareFileResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMGroupShareFileResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMGroupShareFileResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMGroupShareFileResource.class));

       return (TypeAdapter<T>) new TypeAdapter<EMGroupShareFileResource>() {
           @Override
           public void write(JsonWriter out, EMGroupShareFileResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMGroupShareFileResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMGroupShareFileResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMGroupShareFileResource
  * @throws IOException if the JSON string is invalid with respect to EMGroupShareFileResource
  */
  public static EMGroupShareFileResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMGroupShareFileResource.class);
  }

 /**
  * Convert an instance of EMGroupShareFileResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

