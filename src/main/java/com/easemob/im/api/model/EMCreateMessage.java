/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;
import com.easemob.im.api.model.EMMessageContent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * EMCreateMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-27T17:20:33.693628+08:00[Asia/Shanghai]")
public class EMCreateMessage {
  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<String> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private EMMessageContent body;

  public static final String SERIALIZED_NAME_SYNC_DEVICE = "sync_device";
  @SerializedName(SERIALIZED_NAME_SYNC_DEVICE)
  private Boolean syncDevice;

  public static final String SERIALIZED_NAME_ROUTETYPE = "routetype";
  @SerializedName(SERIALIZED_NAME_ROUTETYPE)
  private String routetype;

  public static final String SERIALIZED_NAME_EXT = "ext";
  @SerializedName(SERIALIZED_NAME_EXT)
  private Object ext;

  public static final String SERIALIZED_NAME_CHATROOM_MSG_LEVEL = "chatroom_msg_level";
  @SerializedName(SERIALIZED_NAME_CHATROOM_MSG_LEVEL)
  private String chatroomMsgLevel;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<String> users;

  public EMCreateMessage() {
  }

  public EMCreateMessage from(String from) {

    this.from = from;
    return this;
  }

  /**
   * 消息发送方的用户 ID。若不传入该字段，服务器默认设置为管理员，即 “admin”；若传入字段但值为空字符串 (“”)，请求失败
   * @return from
   **/
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public EMCreateMessage to(List<String> to) {

    this.to = to;
    return this;
  }

  public EMCreateMessage addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * 发送单聊消息 - 消息接收方的用户 ID 数组。每次最多可向 600 个用户发送消息 发送群聊消息 - 消息接收方群组 ID 数组。每次最多可向 3 个群组发送消息 发送聊天室消息 - 消息接收方聊天室 ID 数组。每次最多可向 10 个聊天室发送消息
   * @return to
   **/
  @javax.annotation.Nonnull
  public List<String> getTo() {
    return to;
  }


  public void setTo(List<String> to) {
    this.to = to;
  }


  public EMCreateMessage type(String type) {

    this.type = type;
    return this;
  }

  /**
   * 消息类型： - txt：文本消息； - img：图片消息； - audio：语音消息； - video：视频消息； - file：文件消息； - loc：位置消息； - cmd：透传消息； - custom：自定义消息。
   * @return type
   **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public EMCreateMessage body(EMMessageContent body) {

    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   **/
  @javax.annotation.Nonnull
  public EMMessageContent getBody() {
    return body;
  }


  public void setBody(EMMessageContent body) {
    this.body = body;
  }


  public EMCreateMessage syncDevice(Boolean syncDevice) {

    this.syncDevice = syncDevice;
    return this;
  }

  /**
   * 消息发送成功后，是否将消息同步到发送方 - true：是； - （默认）false：否
   * @return syncDevice
   **/
  @javax.annotation.Nullable
  public Boolean getSyncDevice() {
    return syncDevice;
  }


  public void setSyncDevice(Boolean syncDevice) {
    this.syncDevice = syncDevice;
  }


  public EMCreateMessage routetype(String routetype) {

    this.routetype = routetype;
    return this;
  }

  /**
   * 若传入该参数，其值为 ROUTE_ONLINE，表示接收方只有在线时才能收到消息，若接收方离线则无法收到消息。若不传入该参数，无论接收方在线还是离线都能收到消息
   * @return routetype
   **/
  @javax.annotation.Nullable
  public String getRoutetype() {
    return routetype;
  }


  public void setRoutetype(String routetype) {
    this.routetype = routetype;
  }


  public EMCreateMessage ext(Object ext) {

    this.ext = ext;
    return this;
  }

  /**
   * 消息支持扩展字段，可添加自定义信息。不能对该参数传入 null。同时，推送通知也支持自定义扩展字段，详见 APNs 自定义显示：https://docs-im-beta.easemob.com/document/ios/push.html#_4-%E8%AE%BE%E7%BD%AE%E7%A6%BB%E7%BA%BF%E6%8E%A8%E9%80%81 和 Android 推送字段说明：https://docs-im-beta.easemob.com/document/android/push.html#_5-%E8%A7%A3%E6%9E%90%E6%94%B6%E5%88%B0%E7%9A%84%E6%8E%A8%E9%80%81%E5%AD%97%E6%AE%B5
   * @return ext
   **/
  @javax.annotation.Nullable
  public Object getExt() {
    return ext;
  }


  public void setExt(Object ext) {
    this.ext = ext;
  }


  public EMCreateMessage chatroomMsgLevel(String chatroomMsgLevel) {

    this.chatroomMsgLevel = chatroomMsgLevel;
    return this;
  }

  /**
   * 聊天室消息优先级，仅对发送聊天室消息有效： - high：高； - （默认）normal：普通； - low：低
   * @return chatroomMsgLevel
   **/
  @javax.annotation.Nullable
  public String getChatroomMsgLevel() {
    return chatroomMsgLevel;
  }


  public void setChatroomMsgLevel(String chatroomMsgLevel) {
    this.chatroomMsgLevel = chatroomMsgLevel;
  }


  public EMCreateMessage users(List<String> users) {

    this.users = users;
    return this;
  }

  public EMCreateMessage addUsersItem(String usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * 接收消息的群成员或聊天室成员的用户 ID 数组。每次最多可传 20 个用户 ID
   * @return users
   **/
  @javax.annotation.Nullable
  public List<String> getUsers() {
    return users;
  }


  public void setUsers(List<String> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMCreateMessage createMessage = (EMCreateMessage) o;
    return Objects.equals(this.from, createMessage.from) &&
            Objects.equals(this.to, createMessage.to) &&
            Objects.equals(this.type, createMessage.type) &&
            Objects.equals(this.body, createMessage.body) &&
            Objects.equals(this.syncDevice, createMessage.syncDevice) &&
            Objects.equals(this.routetype, createMessage.routetype) &&
            Objects.equals(this.ext, createMessage.ext) &&
            Objects.equals(this.chatroomMsgLevel, createMessage.chatroomMsgLevel) &&
            Objects.equals(this.users, createMessage.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, type, body, syncDevice, routetype, ext, chatroomMsgLevel, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMCreateMessage {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    syncDevice: ").append(toIndentedString(syncDevice)).append("\n");
    sb.append("    routetype: ").append(toIndentedString(routetype)).append("\n");
    sb.append("    ext: ").append(toIndentedString(ext)).append("\n");
    sb.append("    chatroomMsgLevel: ").append(toIndentedString(chatroomMsgLevel)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("type");
    openapiFields.add("body");
    openapiFields.add("sync_device");
    openapiFields.add("routetype");
    openapiFields.add("ext");
    openapiFields.add("chatroom_msg_level");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("body");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EMCreateMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!EMCreateMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(String.format("The required field(s) %s in EMCreateMessage is not found in the empty JSON string", EMCreateMessage.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!EMCreateMessage.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMCreateMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : EMCreateMessage.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
    }
    // ensure the required json array is present
    if (jsonObj.get("to") == null) {
      throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
    } else if (!jsonObj.get("to").isJsonArray()) {
      throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
    }
    if (!jsonObj.get("type").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
    }
    // validate the required field `body`
    EMMessageContent.validateJsonElement(jsonObj.get("body"));
    if ((jsonObj.get("routetype") != null && !jsonObj.get("routetype").isJsonNull()) && !jsonObj.get("routetype").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `routetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routetype").toString()));
    }
    if ((jsonObj.get("chatroom_msg_level") != null && !jsonObj.get("chatroom_msg_level").isJsonNull()) && !jsonObj.get("chatroom_msg_level").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format("Expected the field `chatroom_msg_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chatroom_msg_level").toString()));
    }
    // ensure the optional json data is an array if present
    if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull() && !jsonObj.get("users").isJsonArray()) {
      throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!EMCreateMessage.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'EMCreateMessage' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<EMCreateMessage> thisAdapter
              = gson.getDelegateAdapter(this, TypeToken.get(EMCreateMessage.class));

      return (TypeAdapter<T>) new TypeAdapter<EMCreateMessage>() {
        @Override
        public void write(JsonWriter out, EMCreateMessage value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }

        @Override
        public EMCreateMessage read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }

      }.nullSafe();
    }
  }

  /**
   * Create an instance of EMCreateMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EMCreateMessage
   * @throws IOException if the JSON string is invalid with respect to EMCreateMessage
   */
  public static EMCreateMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMCreateMessage.class);
  }

  /**
   * Convert an instance of EMCreateMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

