/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiException;
import com.easemob.im.api.model.*;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for BlockApi
 */
public class BlockApiTest extends AbstractTest {

    private final UserApi userApi = new UserApi();

    private final BlockApi api = new BlockApi();

    public BlockApiTest() {
    }

    /**
     * 添加用户至黑名单
     * <p>
     * 将一个或多个用户添加用户到黑名单。用户被加入黑名单后，无法向你发送消息，也无法发送好友申请。用户可以将任何其他用户添加到黑名单列表，无论该用户是否是好友。好友被加入黑名单后仍在好友列表上显示。每个用户的黑名单人数上限为 500。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E8%87%B3%E9%BB%91%E5%90%8D%E5%8D%95
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserToBlockListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String username3 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        EMCreateUser createUser3 = new EMCreateUser();
        createUser3.setUsername(username3);
        createUser3.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);
        emCreateUserList.add(createUser3);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMAddUserToBlockList addUserToBlockList = new EMAddUserToBlockList();
        addUserToBlockList.setUsernames(Arrays.asList(username2, username3));
        EMAddUserToBlockListResult addUserToBlockListResult =
                assertDoesNotThrow(() -> api.addUserToBlockList(username1, addUserToBlockList));
        assertNotNull(addUserToBlockListResult);
        assertNotNull(addUserToBlockListResult.getData());
        assertEquals(2, addUserToBlockListResult.getData().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        assertDoesNotThrow(() -> userApi.deleteUser(username3));
    }

    /**
     * 获取黑名单列表
     * <p>
     * 获取指定用户的好友列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E8%8E%B7%E5%8F%96%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlockListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String username3 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        EMCreateUser createUser3 = new EMCreateUser();
        createUser3.setUsername(username3);
        createUser3.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);
        emCreateUserList.add(createUser3);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMAddUserToBlockList addUserToBlockList = new EMAddUserToBlockList();
        addUserToBlockList.setUsernames(Arrays.asList(username2, username3));
        EMAddUserToBlockListResult addUserToBlockListResult =
                assertDoesNotThrow(() -> api.addUserToBlockList(username1, addUserToBlockList));
        assertNotNull(addUserToBlockListResult);
        assertNotNull(addUserToBlockListResult.getData());
        assertEquals(2, addUserToBlockListResult.getData().size());

        EMGetBlockListResult getBlockListResult =
                assertDoesNotThrow(() -> api.getBlockList(username1, 1, null));
        assertNotNull(getBlockListResult);
        assertNotNull(getBlockListResult.getData());
        assertEquals(1, getBlockListResult.getData().size());
        assertNotNull(getBlockListResult.getCursor());

        EMGetBlockListResult getBlockListNextResult = assertDoesNotThrow(
                () -> api.getBlockList(username1, 1, getBlockListResult.getCursor()));
        assertEquals(1, getBlockListResult.getData().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        assertDoesNotThrow(() -> userApi.deleteUser(username3));
    }

    /**
     * 从黑名单中移除用户
     * <p>
     * 从用户的黑名单中移除用户： 将好友从黑名单中移除后，恢复好友关系，可以正常收发消息； 将非好友从黑名单中移除后，恢复到未添加好友的状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E4%BB%8E%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%AD%E7%A7%BB%E9%99%A4%E7%94%A8%E6%88%B7
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromBlockListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String username3 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        EMCreateUser createUser3 = new EMCreateUser();
        createUser3.setUsername(username3);
        createUser3.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);
        emCreateUserList.add(createUser3);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMAddUserToBlockList addUserToBlockList = new EMAddUserToBlockList();
        addUserToBlockList.setUsernames(Arrays.asList(username2, username3));
        EMAddUserToBlockListResult addUserToBlockListResult =
                assertDoesNotThrow(() -> api.addUserToBlockList(username1, addUserToBlockList));
        assertNotNull(addUserToBlockListResult);
        assertNotNull(addUserToBlockListResult.getData());
        assertEquals(2, addUserToBlockListResult.getData().size());

        EMGetBlockListResult getBlockListResult =
                assertDoesNotThrow(() -> api.getBlockList(username1, 2, null));
        assertNotNull(getBlockListResult);
        assertNotNull(getBlockListResult.getData());
        assertEquals(2, getBlockListResult.getData().size());

        EMRemoveUserFromBlockListResult removeUserFromBlockListResult =
                assertDoesNotThrow(() -> api.removeUserFromBlockList(username1, username2));
        assertNotNull(removeUserFromBlockListResult);
        assertNotNull(removeUserFromBlockListResult.getEntities());
        assertEquals(username2, removeUserFromBlockListResult.getEntities().get(0).getUsername());

        EMGetBlockListResult getBlockListResult1 =
                assertDoesNotThrow(() -> api.getBlockList(username1, 2, null));
        assertNotNull(getBlockListResult1);
        assertNotNull(getBlockListResult1.getData());
        assertEquals(1, getBlockListResult1.getData().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        assertDoesNotThrow(() -> userApi.deleteUser(username3));
    }

}
